{"version":3,"sources":["logo.svg","components/Bingo.js","components/BingoColumn.js","components/BingoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Bingo","SelectNumber","setState","state","select","DeSelectNumber","num","console","log","this","Math","round","random","props","max","className","onClick","React","Component","BingoColumn","letter","BingoList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,qLCmE5BC,G,wDA9DX,aAAc,IAAD,8BACT,gBAOJC,aAAe,WAGX,EAAKC,UAAS,SAAAC,GACV,MAAO,CAACC,QAAQ,OAZX,EAgBbC,eAAiB,WAGb,EAAKH,UAAS,SAAAC,GACV,MAAO,CAACC,QAAQ,OAlBpB,EAAKD,MAAQ,CACTC,QAAQ,EACRE,IAAK,GAJA,E,qDA4BV,GAFAC,QAAQC,IAAIC,KAAKN,MAAMC,QAED,IAAnBK,KAAKN,MAAMG,IAAU,CACvB,IAAIA,EAAMI,KAAKC,MAAsB,GAAhBD,KAAKE,UAC1BH,KAAKP,UAAS,SAAAC,GACV,MAAO,CAACG,IAAMA,MAIlB,OAAuB,OAAnBG,KAAKI,MAAMC,IAGX,yBAAKC,UAAU,yDAAf,MAKIN,KAAKN,MAAMC,OAEf,yBAAKY,QAASP,KAAKJ,eAAgBU,UAAU,yDAC1CN,KAAKN,MAAMG,KAMd,yBAAKU,QAASP,KAAKR,aAAcc,UAAU,yDACvCN,KAAKN,MAAMG,S,GAvDPW,IAAMC,YCkBXC,E,uKAdX,OAES,yBAAKJ,UAAU,WAChB,4BAAKN,KAAKI,MAAMO,QACjB,kBAAC,EAAD,MAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAON,IAAKL,KAAKI,MAAMC,MACvB,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAZeG,IAAMC,WCgBjBG,EAdG,WAEd,OACI,6BACI,kBAAC,EAAD,CAAcD,OAAQ,IAAMN,IAAK,MACjC,kBAAC,EAAD,CAAcM,OAAQ,IAAMN,IAAK,MACjC,kBAAC,EAAD,CAAcM,OAAQ,IAAKN,IAAK,OAChC,kBAAC,EAAD,CAAcM,OAAQ,IAAMN,IAAK,MACjC,kBAAC,EAAD,CAAcM,OAAQ,IAAKN,IAAK,QCA7BQ,MATf,WACE,OACE,yBAAKP,UAAU,OAEb,kBAAC,EAAD,QCGcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.0bede6eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './Bingo.css'\n\nclass Bingo extends React.Component {\n\n    constructor(){\n        super();\n        this.state = {\n            select: false,\n            num: 0\n        }\n    }\n\n    SelectNumber = () =>\n    {\n     //   console.log('select');\n        this.setState(state => {\n            return {select: true}\n        });\n    }\n\n    DeSelectNumber = () =>\n    {\n      //  console.log('deselect')\n        this.setState(state => {\n            return {select: false}\n        });\n    }\n\n    render() {\n\n       console.log(this.state.select)\n\n       if(this.state.num === 0){\n        var num = Math.round(Math.random() * 99)\n        this.setState(state =>{\n            return {num : num}\n        })\n       }\n\n        if (this.props.max === null) {\n\n            return (\n            <div className='bg-light-green dib br3 pa3 ma2  bw2 shadow-5 fl w-100'>\n                FR\n            </div>\n            )\n        }\n        else if(this.state.select) {\n            return (\n            <div onClick={this.DeSelectNumber} className='bg-light-green dib br3 pa3 ma2  bw2 shadow-5 fl w-100'>\n              {this.state.num}\n            </div>\n            )\n        }\n        else  {\n            return (\n            <div onClick={this.SelectNumber} className='bg-light-white dib br3 pa3 ma2  bw2 shadow-5 fl w-100' >\n               {this.state.num}\n            </div>\n            )\n        }\n    }\n\n}\n\n\nexport default Bingo","import React from 'react'\nimport Bingo from './Bingo'\n\n\nclass BingoColumn extends React.Component {\n\n    render(){\n    return (\n     \n             <div className='fl w-20'>\n            <h1>{this.props.letter}</h1>\n           <Bingo/>\n\n           <Bingo/>\n           <Bingo max={this.props.max} />\n           <Bingo/>\n           <Bingo/>\n           </div>\n           )\n    }\n}\nexport default BingoColumn","\nimport React from 'react'\nimport './BingoList.css'\nimport BingoColumn from './BingoColumn'\n\n\nconst BingoList = () =>{\n\n    return (\n        <div>\n            <BingoColumn  letter={'B'}  max={'1'} />\n            <BingoColumn  letter={'I'}  max={'2'} />\n            <BingoColumn  letter={'N'} max={null} />\n            <BingoColumn  letter={'G'}  max={'3'} />\n            <BingoColumn  letter={'O'} max={'4'} />\n    </div>\n    )\n\n}\n\nexport default BingoList","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BingoList from './components/BingoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <BingoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}